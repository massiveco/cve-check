package collectors

import (
	"fmt"
	"os"
	"os/exec"
	"reflect"
	"testing"

	"github.com/massiveco/cve-check/inventory"
)

func TestApk_Packages(t *testing.T) {
	type fields struct {
		command *exec.Cmd
	}
	cmd := fakeExecCommand("apk", "info", "-v")
	tests := []struct {
		name    string
		fields  fields
		want    *inventory.Inventory
		wantErr bool
	}{
		{
			name: "Test package extraction",
			fields: fields{
				command: cmd,
			},
			want: &inventory.Inventory{
				Items: []inventory.Item{inventory.Item{Name: "musl", Version: inventory.Version{Major: 1, Minor: 1, Patch: 19}, Source: "apk"}},
			},
			wantErr: false,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			a := Apk{
				command: tt.fields.command,
			}
			got, err := a.Packages()
			if (err != nil) != tt.wantErr {
				t.Errorf("Apk.Packages() error = %v, wantErr %v", err, tt.wantErr)
				return
			}
			if !reflect.DeepEqual(got, tt.want) {
				t.Errorf("Apk.Packages() = %v, want %v", got, tt.want)
			}
		})
	}
}

func fakeExecCommand(command string, args ...string) *exec.Cmd {
	cs := []string{"-test.run=TestHelperProcess", "--", command}
	cs = append(cs, args...)
	cmd := exec.Command(os.Args[0], cs...)
	cmd.Env = []string{"GO_WANT_HELPER_PROCESS=1"}
	return cmd
}

func TestHelperProcess(t *testing.T) {
	if os.Getenv("GO_WANT_HELPER_PROCESS") != "1" {
		return
	}

	// some code here to check arguments perhaps?
	fmt.Fprintf(os.Stdout, "musl-1.1.19-r10")
	os.Exit(0)
}
